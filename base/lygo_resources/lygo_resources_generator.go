package lygo_resources

import (
	"bytes"
	"errors"
	"fmt"
	"github.com/botikasm/lygo/base/lygo_conv"
	"github.com/botikasm/lygo/base/lygo_paths"
	"go/format"
	"io/ioutil"
	"os"
	"path"
	"path/filepath"
	"strings"
	"text/template"
)

//----------------------------------------------------------------------------------------------------------------------
//	v a r s
//----------------------------------------------------------------------------------------------------------------------

var tplResource = template.Must(template.New("").Funcs(map[string]interface{}{"formatByteSlice": formatByteSlice}).Parse(`
// Code generated by go generate; DO NOT EDIT.
// generated using files from resources directory
// DO NOT COMMIT this file
package {{.Package}}

import "github.com/botikasm/lygo/base/lygo_resources"

func init(){
	{{- range $name, $file := .Resources }}
    	lygo_resources.Resources.Add("{{ $name }}", []byte{ {{ formatByteSlice $file }} })
	{{- end }}
}
`))

var tplMain = template.Must(template.New("").Parse(`
// Code generated by go generate; DO NOT EDIT.
// generated using files from resources directory
// DO NOT COMMIT this file
package {{.Package}}

import "github.com/botikasm/lygo/base/lygo_resources"

func Get(resource string)([]byte, bool){
	return lygo_resources.Get(resource)
}
`))

const startDirectory = "resources"
const outFileName = "blobResources.go"
const pkg = "lygo_resources"
const outSingle = "single"
const outMultiple = "multiple"

//----------------------------------------------------------------------------------------------------------------------
//	t y p e s
//----------------------------------------------------------------------------------------------------------------------

type Generator struct {
	Package                 string
	StartDirectory          string
	OutputFile              string
	ForceSingleResourceFile bool
	Exclude                 []string
}

//----------------------------------------------------------------------------------------------------------------------
//	c o n s t r u c t o r
//----------------------------------------------------------------------------------------------------------------------

func NewGenerator() *Generator {
	instance := new(Generator)
	instance.StartDirectory = startDirectory
	instance.OutputFile = ""
	instance.Package = pkg
	instance.ForceSingleResourceFile = false
	instance.Exclude = make([]string, 0)
	return instance
}

//----------------------------------------------------------------------------------------------------------------------
//	p u b l i c
//----------------------------------------------------------------------------------------------------------------------

func (instance *Generator) Start() {
	fmt.Println("---------------------------------------")
	fmt.Println("Packing resources starting from directory '" + instance.StartDirectory + "'")
	fmt.Println("\tinto path '" + instance.OutputFile + "'")
	fmt.Println("\twith package '" + instance.Package + "'")

	mode, err := instance.init()

	if nil != err {
		fmt.Println("ERROR:", err.Error())
		return
	}

	fmt.Println("\tmode '" + mode + "'")

	count := 0
	resources := make(map[string][]byte)
	context := make(map[string]interface{})
	context["Package"] = instance.Package
	context["Resources"] = resources
	err = filepath.Walk(instance.StartDirectory, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			fmt.Println("Error :", err)
			return err
		}
		relativePath := filepath.ToSlash(strings.TrimPrefix(path, "resources"))
		if info.IsDir() {
			fmt.Println("[DIR] ", relativePath)
			return nil
		} else {
			b, err := ioutil.ReadFile(path)
			if err != nil {
				fmt.Printf("Error reading %s: %s", path, err)
				return err
			}
			if !instance.isExcluded(relativePath) {
				fmt.Println("\t* INCLUDING: ", relativePath)
				count++
				resources[relativePath] = b
			} else {
				fmt.Println("\t! EXCLUDING: ", relativePath)
			}
		}
		return nil
	})

	if err != nil {
		fmt.Println("Error walking through resources directory:", err)
		return
	}

	//-- write output --//
	files, err := writeFiles(mode, instance.OutputFile, instance.Package, resources)
	if nil!=err{
		fmt.Println("ERROR:", err.Error())
		return
	}

	fmt.Println("Packing resources done...")
	fmt.Println("TOTAL RESOURCES: ", count)
	fmt.Println("DO NOT COMMIT:")
	for _, file := range files {
		fmt.Println("\t", file)
	}
}

//----------------------------------------------------------------------------------------------------------------------
//	p r i v a t e
//----------------------------------------------------------------------------------------------------------------------

func (instance *Generator) init() (string, error) {
	if _, err := os.Stat(instance.StartDirectory); os.IsNotExist(err) {
		return "", errors.New("Resources directory does not exists!")
	}

	if len(instance.OutputFile) == 0 {
		instance.OutputFile = "./" + instance.Package + "/blob_{{ .count }}.go"
	}

	if instance.OutputFile != outFileName {
		instance.OutputFile = lygo_paths.Absolute(instance.OutputFile)
		lygo_paths.Mkdir(instance.OutputFile)
	}

	if instance.ForceSingleResourceFile {
		return outSingle, nil
	}
	return outMultiple, nil
}

func (instance *Generator) isExcluded(path string) bool {
	for _, s := range instance.Exclude {
		if strings.Index(path, s) == 0 {
			return true
		}
	}
	return false
}

//----------------------------------------------------------------------------------------------------------------------
//	S T A T I C
//----------------------------------------------------------------------------------------------------------------------

func formatByteSlice(sl []byte) string {
	builder := strings.Builder{}
	for _, v := range sl {
		builder.WriteString(fmt.Sprintf("%d,", int(v)))
	}
	return builder.String()
}

func getResourceFileName(count int, pattern string) (string, error) {
	if count > -1 && strings.Index(pattern, "{{") > -1 {
		tpl, err := template.New("").Parse(pattern)
		if err != nil {
			return "", err
		}
		context := make(map[string]interface{})
		context["count"] = count
		builder := &bytes.Buffer{}
		err = tpl.Execute(builder, context)
		if err != nil {
			return "", err
		}
		return builder.String(), nil
	}

	if count > -1 {
		return lygo_paths.ChangeFileNameWithSuffix(pattern, "_"+lygo_conv.ToString(count)), nil
	}
	return path.Join(path.Dir(pattern), outFileName), nil
}

func writeFiles(mode, fileName, packageName string, resources map[string][]byte) ([]string, error) {
	context := make(map[string]interface{})
	context["Package"] = packageName
	context["Resources"] = resources

	files := make([]string, 0)
	mainFile := path.Join(path.Dir(fileName), packageName +".go")
	err := writeFile(mainFile, tplMain, context)
	if nil != err {
		return nil, err
	} else {
		files = append(files, mainFile)
	}
	if mode == outMultiple {
		count := 0
		for file, content := range resources {
			r := make(map[string][]byte)
			r[file] = content
			context["Resources"] = r
			resFile, err := getResourceFileName(count, fileName)
			if nil != err {
				return nil, err
			}
			err = writeFile(resFile, tplResource, context)
			if nil != err {
				return nil, err
			}
			files = append(files, resFile)
			count++
		}
	} else {
		resFile, err := getResourceFileName(-1, fileName)
		if nil != err {
			return nil, err
		}
		err = writeFile(resFile, tplResource, context)
		if nil != err {
			return nil, err
		}
		files = append(files, resFile)
	}

	return files, nil
}

func writeFile(fileName string, template *template.Template, context map[string]interface{}) error {

	f, err := os.Create(fileName)
	if err != nil {
		fmt.Println("Error creating blob file:", err)
		return err
	}
	defer f.Close()

	builder := &bytes.Buffer{}

	// solve template
	err = template.Execute(builder, context)
	if err != nil {
		fmt.Println("Error executing template", err)
		return err
	}

	data, err := format.Source(builder.Bytes())
	if err != nil {
		fmt.Println("Error formatting generated code", err)
		return err
	}
	err = ioutil.WriteFile(fileName, data, os.ModePerm)
	if err != nil {
		fmt.Println("Error writing blob file", err)
		return err
	}

	return nil
}
