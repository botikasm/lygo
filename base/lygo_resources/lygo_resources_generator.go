package lygo_resources

import (
	"bytes"
	"fmt"
	"go/format"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"text/template"
)

//----------------------------------------------------------------------------------------------------------------------
//	v a r s
//----------------------------------------------------------------------------------------------------------------------

var packageTemplate = template.Must(template.New("").Funcs(map[string]interface{}{"conv": formatByteSlice}).Parse(`
// Code generated by go generate; DO NOT EDIT.
// generated using files from resources directory
// DO NOT COMMIT this file
package lygo_resources

func init(){
	{{- range $name, $file := . }}
    	resources.Add("{{ $name }}", []byte{ {{ conv $file }} })
	{{- end }}
}
`))

const dirResources = "resources"
const outFileName = "blobResources.go"

//----------------------------------------------------------------------------------------------------------------------
//	t y p e s
//----------------------------------------------------------------------------------------------------------------------

type Generator struct {
	Directory string
	OutputFile string
}

//----------------------------------------------------------------------------------------------------------------------
//	c o n s t r u c t o r
//----------------------------------------------------------------------------------------------------------------------

func NewGenerator() *Generator{
	instance := new (Generator)
	instance.Directory = dirResources
	instance.OutputFile = outFileName
	return instance
}

//----------------------------------------------------------------------------------------------------------------------
//	p u b l i c
//----------------------------------------------------------------------------------------------------------------------

func (instance *Generator) Start() {
	fmt.Println("---------------------------------------")
	fmt.Println("Packing resources starting from directory '" + instance.Directory + "'")

	if _, err := os.Stat(instance.Directory); os.IsNotExist(err) {
		fmt.Println("Resources directory does not exists!")
		return
	}

	resources := make(map[string][]byte)
	err := filepath.Walk(instance.Directory, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			fmt.Println("Error :", err)
			return err
		}
		relativePath := filepath.ToSlash(strings.TrimPrefix(path, "resources"))
		if info.IsDir() {
			fmt.Println(path, "is a directory, skipping...")
			return nil
		} else {
			fmt.Println(path, "is a file, packing as: ", relativePath)
			b, err := ioutil.ReadFile(path)
			if err != nil {
				fmt.Printf("Error reading %s: %s", path, err)
				return err
			}
			resources[relativePath] = b
		}
		return nil
	})

	if err != nil {
		fmt.Println("Error walking through resources directory:", err)
		return
	}

	//lygo_paths.Mkdir(outputFileName)
	f, err := os.Create(instance.OutputFile)
	if err != nil {
		fmt.Println("Error creating blob file:", err)
		return
	}
	defer f.Close()

	builder := &bytes.Buffer{}

	err = packageTemplate.Execute(builder, resources)
	if err != nil {
		fmt.Println("Error executing template", err)
		return
	}

	data, err := format.Source(builder.Bytes())
	if err != nil {
		fmt.Println("Error formatting generated code", err)
		return
	}
	err = ioutil.WriteFile(instance.OutputFile, data, os.ModePerm)
	if err != nil {
		fmt.Println("Error writing blob file", err)
		return
	}

	fmt.Println("Packing resources done...")
	fmt.Println("DO NOT COMMIT " + instance.OutputFile)
}

//----------------------------------------------------------------------------------------------------------------------
//	S T A T I C
//----------------------------------------------------------------------------------------------------------------------

func formatByteSlice(sl []byte) string {
	builder := strings.Builder{}
	for _, v := range sl {
		builder.WriteString(fmt.Sprintf("%d,", int(v)))
	}
	return builder.String()
}
